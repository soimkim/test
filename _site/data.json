[{"permalink":"//","layout":"default","title":"OSS Review Toolkit (ORT) 란","content":"# OSS Review Toolkit (ORT) 란\n\nOSS Review Toolkit (ORT)은 Project에 포함된 Open Source Software의 dependency 정보를 자동으로 추출하고, 해당 Open Source Software를 다운로드 받아 Source Code에 대하여 String Search를 기반으로 분석하는 Open Source tool([ScanCode](https://github.com/nexB/scancode-toolkit), [Askalono](https://github.com/amzn/askalono), [lc](https://github.com/boyter/lc), [Licensee](https://github.com/benbalter/licensee))을 이용하여 License, Copyright등의 정보를 추출합니다. 검출된 License에 대하여 사용자가 정의한 Policy를 적용할 수 있으며, 분석 결과를 다양한 형태의 Report로 생성합니다. \n\n## 특징\n- [Apache-2.0](https://spdx.org/licenses/Apache-2.0.html)으로 배포되는 Open Source로, 무료로 사용할 수 있고, Source Code 수정이 가능합니다.\n- [Kotlin](https://kotlinlang.org/)으로 작성되었으며 build system으로 [Gradle](https://gradle.org/)을 이용합니다. \n- 프로젝트의 transitive dependency의 tree와 package의 meta data를 분석합니다.\n- Source Code에 대한 License text 분석시, Scanner를 선택 가능합니다.\n- 사용자가 정의한 License Policy를 적용할 수 있습니다.\n- 다양한 포맷의 Report를 생성할 수 있습니다.\n\n## 관련 링크\n- 배포처 : [https://github.com/oss-review-toolkit/ort](https://github.com/oss-review-toolkit/ort)\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"permalink":"/use/result_files/scan/downloads/PyPI/unknown/cffi/1.14.3/","layout":"default","title":"CFFI","content":"CFFI\n====\n\nForeign Function Interface for Python calling C code.\nPlease see the [Documentation](http://cffi.readthedocs.org/) or uncompiled\nin the doc/ subdirectory.\n\nDownload\n--------\n\n[Download page](https://bitbucket.org/cffi/cffi/downloads)\n\nContact\n-------\n\n[Mailing list](https://groups.google.com/forum/#!forum/python-cffi)\n\nTesting/development tips\n------------------------\n\nTo run tests under CPython, run::\n\n pip install pytest # if you don't have py.test already\n pip install pycparser\n python setup.py build_ext -f -i\n py.test c/ testing/\n\nIf you run in another directory (either the tests or another program),\nyou should use the environment variable ``PYTHONPATH=/path`` to point\nto the location that contains the ``_cffi_backend.so`` just compiled.\n","dir":"/use/result_files/scan/downloads/PyPI/unknown/cffi/1.14.3/","name":"README.md","path":"use/result_files/scan/downloads/PyPI/unknown/cffi/1.14.3/cffi-1.14.3/README.md","url":"/use/result_files/scan/downloads/PyPI/unknown/cffi/1.14.3/"},{"permalink":"/use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/","layout":"default","title":null,"content":"[![Latest version on\nPyPi](https://badge.fury.io/py/tox.svg)](https://badge.fury.io/py/tox)\n[![Supported Python\nversions](https://img.shields.io/pypi/pyversions/tox.svg)](https://pypi.org/project/tox/)\n[![Azure Pipelines build\nstatus](https://dev.azure.com/toxdev/tox/_apis/build/status/tox%20ci?branchName=master)](https://dev.azure.com/toxdev/tox/_build/latest?definitionId=9&branchName=master)\n[![Documentation\nstatus](https://readthedocs.org/projects/tox/badge/?version=latest&style=flat-square)](https://tox.readthedocs.io/en/latest/?badge=latest)\n[![Code style:\nblack](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Downloads](https://pepy.tech/badge/tox/month)](https://pepy.tech/project/tox/month)\n\n<a href=\"https://tox.readthedocs.io\">\n <img src=\"https://raw.githubusercontent.com/tox-dev/tox/master/docs/_static/img/tox.png\"\n alt=\"tox logo\"\n height=\"150px\"\n align=\"right\">\n</a>\n\n# tox automation project\n\n**Command line driven CI frontend and development task automation tool**\n\nAt its core tox provides a convenient way to run arbitrary commands in\nisolated environments to serve as a single entry point for build, test\nand release activities.\n\ntox is highly\n[configurable](https://tox.readthedocs.io/en/latest/config.html) and\n[pluggable](https://tox.readthedocs.io/en/latest/plugins.html).\n\n## Example: run tests with Python 3.7 and Python 3.8\n\ntox is mainly used as a command line tool and needs a `tox.ini` or a\n`tool.tox` section in `pyproject.toml` containing the configuration.\n\nTo test a simple project that has some tests, here is an example with\na `tox.ini` in the root of the project:\n\n``` {.sourceCode .ini}\n[tox]\nenvlist = py37,py38\n\n[testenv]\ndeps = pytest\ncommands = pytest\n```\n\n``` {.sourceCode .console}\n$ tox\n\n[lots of output from what tox does]\n[lots of output from commands that were run]\n\n__________________ summary _________________\n py37: commands succeeded\n py38: commands succeeded\n congratulations :)\n```\n\ntox created two ``testenvs`` - one based on Python3.7 and one based on\nPython3.8, it installed pytest in them and ran the tests. The report at\nthe end summarizes which ``testenvs`` have failed and which have\nsucceeded.\n\n**Note:** To learn more about what you can do with tox, have a look at\n[the collection of examples in the\ndocumentation](https://tox.readthedocs.io/en/latest/examples.html)\nor [existing projects using\ntox](https://github.com/search?l=INI&q=tox.ini+in%3Apath&type=Code).\n\n### How it works\n\ntox creates virtual environments for all configured so called\n``testenvs``, it then installs the project and other necessary\ndependencies and runs the configured set of commands. See [system\noverview](https://tox.readthedocs.io/en/latest/#system-overview) for\nmore details.\n\n<a href=\"https://tox.readthedocs.io/en/latest/#system-overview\">\n <img src=\"https://raw.githubusercontent.com/tox-dev/tox/master/docs/img/tox_flow.png\"\n alt=\"tox flow\"\n width=\"800px\"\n align=\"center\">\n</a>\n\n### tox can be used for ...\n\n- creating development environments\n- running static code analysis and test tools\n- automating package builds\n- running tests against the package build by tox\n- checking that packages install correctly with different Python\n versions/interpreters\n- unifying Continuous Integration and command line based testing\n- building and deploying project documentation\n- releasing a package to PyPI or any other platform\n- limit: your imagination\n\n### Documentation\n\nDocumentation for tox can be found at [Read The Docs](https://tox.readthedocs.org).\n\n### Communication and questions\n\nIf you have questions or suggestions you can first check if they have already\nbeen answered or discussed on our [issue tracker](https://github.com/tox-dev/tox/issues?utf8=%E2%9C%93&q=is%3Aissue+sort%3Aupdated-desc+label%3A%22type%3Aquestion+%3Agrey_question%3A%22+)\non [Stack Overflow (tagged with `tox`)](https://stackoverflow.com/questions/tagged/tox).\n\nIf you want to discuss topics or propose changes that might not (yet)\nfit into an issue, you can get in touch via mail through\n<tox-dev@python.org>.\n\nWe also have a [Gitter community](https://gitter.im/tox-dev/).\n\n### Contributing\n\nContributions are welcome. See\n[contributing](https://github.com/tox-dev/tox/blob/master/CONTRIBUTING.rst)\nand our [Contributor Covenant Code of\nConduct](https://github.com/tox-dev/tox/blob/master/CODE_OF_CONDUCT.md).\n\nCurrently the [code](https://github.com/tox-dev/tox) and the\n[issues](https://github.com/tox-dev/tox/issues) are hosted on Github.\n\nThe project is licensed under\n[MIT](https://github.com/tox-dev/tox/blob/master/LICENSE).\n","dir":"/use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/","name":"README.md","path":"use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/tox-3.20.1/README.md","url":"/use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/"},{"layout":"default","title":"Extension of environment handling and building packages","content":"# Extension of environment handling and building packages\n\nIssue reference: #338\n\n*Notes from a discussion at the pytest sprint 2016*\n\nGoal: drive building of packages and the environments needed to test them, exercising the tests and report the results for more than just virtualenvs and python virtualenvs\n\n### Problems\n\n* No concept of mapping environments to specific packages (versioned packages)\n* no control over when it happens for specific environment\n* no control over how it happens (e.g. which python interpreter is used to create the package)\n* No way of triggering build only if there is an environment that needs a specific build trigger it only if an environment actually needs it\n* package definition that might match on everything might be a problem for which environments test? Not clear?\n\n### Solution\n\nIt should be possible to build other kinds of packages than just the standard sdist and it should also be possible to create different kinds of builds that can be used from different environments. To make this possible there has to be some concept of factorized package definitions and a way to match these factorized builds to environments with a similar way of matching like what is in place already to generate environments. sdist would for example would match to a \"sdist\" factor to only be matched against virtualenvs as the default.\n\nThis could then be used to have virtualenv, conda, nixos, docker, pyenv, rpm, deb, etc. builds and tie them to concrete test environments.\n\nTo summarize - we would need a:\n\n * packagedef (how to build a package)\n * envdef (how to build an environment)\n * way of matching envs to concrete packages (at package definition level) (e.g `{py27,py34}-{win32,linux}-{venv,conda,pyenv}-[...]`)\n\n## Beginnings of configuration examples (not thought out yet)\n\n [tox]\n envlist={py,27,py34}-{win32, linux}-{conda,virtualenv}\n\n [packagedef:sdist]\n # how to build (e.g. {py27,py34}-{sdist})\n # how to match (e.g. {py27,py34}-{sdist})\n\n [packagedef:conda]\n # how to build (e.g. {py27,py34}-{conda})\n # how to match (e.g. {py27,py34}-{conda})\n\n [packagedef:wheel]\n # how to build\n # how to match\n\n#### integrate detox\n\n* reporting in detox is minimal (would need to improve)\n* restricting processes would be necessary depending on power of the machine\n (creating 16 processe on a dual core machine might be overkill)\n* port it from eventlets to threads?\n\n### Concrete use case conda integration (started by Bruno)\n\n* Asynchronicity / detox not taken into account yet\n* Conda activation might do anything (change filesys, start DBs)\n* Can I activate environments in parallel\n* Packages would need to be created (from conda.yml)\n* Activation is a problem\n\n\n### Unsorted discussion notes\n\n* Simplify for the common case: most packages are universal, so it should be simple\none to one relationship from environment to directory\n* Floris: metadata driven. Package has metadata to the env with what env it is compatible\n* Holger: configuration driven. explicitly configuring which packages should be used (default sdist to be used, overridable by concrete env)\n* Ronny: \"package definitions\" (this package, this setup command) + matching definitions (matching packages (with wildcards) for environments)\n\n\n## Proposal\n\nThis feature shall allow one to specify how plugins can specify new types of package formats and environments to run test\ncommands in.\n\nSuch plugins would take care of setting up the environment, create packages and run test commands using hooks provided\nby tox. The actual knowledge how to create a certain package format is implement in the plugin.\n\nPlugin decides which is the required python interpreter to use in order to create the relevant package format.\n\n\n```ini\n[tox]\nplugins=conda # virtualenv plugin is builtin; intention here is to bail out early in case the specified plugins\n # are not installed\nenvlist=py27,py35\n\n[testenv]\npackage_formats= # new option to specify wanted package formats for test environment using tox factors feature\n # defaults to \"sdist\" if not set\n py35: sdist wheel conda # names here are provided by plugins (reserved keywords)\n py27: sdist conda\ncommands = py.test\n```\n\nLising tox environments (`tox --list`) would display the following output:\n\n```\n(sdist) py27\n(conda) py27\n(sdist) py35\n(wheel) py35\n(conda) py35\n```\n\nTo remain backward-compatible, the package format will not be displayed if only a single package format is specified.\n\n\n\nHow to skip building a package for a specific factor?\n\nIllustrate how to exclude a certain package format for a factor:\n\n```ini\n[tox]\nplugins=conda\nenvlist=py27,py35,py27-xdist\n\n[testenv]\ncommands = py.test\npackage_formats=sdist wheel conda\nexclude_package_formats= # new option which filters out packages\n py27-xdist: wheel\n```\n\nor possibly using the negated factor condition support:\n\n```ini\n[tox]\nplugins=conda\nenvlist=py27,py35,py27-xdist\n\n[testenv]\ncommands = py.test\npackage_formats=\n sdist\n !py27,!xdist: wheel\n conda\n```\n\nOutput of `tox --list`:\n\n```\n(sdist) py27\n(wheel) py27\n(conda) py27\n(sdist) py35\n(wheel) py35\n(conda) py35\n(sdist) py27-xdist\n(conda) py27-xdist\n```\n\n\n### Implemenation Details\n\n```\ntox_package_formats() -> ['conda'] # ['sdist', 'wheel']\ntox_testenv_create(env_meta, package_type) -> # creates an environment for given package, using\n # information from env_meta (like .envdir)\n # returns: an \"env\" object which is forwaded to the next hooks\ntox_testenv_install(env_meta, package_type, env) -> # installs deps and package into environment\ntox_testenv_runtest(env_meta, package_type, env) -> # activates environment and runs test commands\n\ntox_testenv_updated(env_meta, package_type) -> # returns True if hte environment is already up to date\n # otherwise, tox will remove the environment completely and\n # create a new one\n```\n","dir":"/use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/tox-3.20.1/docs/drafts/","name":"extend-envs-and-packagebuilds.md","path":"use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/tox-3.20.1/docs/drafts/extend-envs-and-packagebuilds.md","url":"/use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/tox-3.20.1/docs/drafts/extend-envs-and-packagebuilds.html"},{"layout":"default","title":null,"content":"```\n[tox]\nenvlist=py27,py35\n\n[testenv]\ncommands= py.test --timeout=180 {posargs:tests}\ndeps=pytest>=2.3.5\n pytest-timeout\n\n# USE CASE 1: plain conda, with deps on tox.ini\ncreate_env_command = conda create --prefix {envdir} python={python_version}\ninstall_command = conda install --prefix {envdir} {opts} {packages}\nlist_dependencies_command = conda list --prefix {envdir}\n\n# deprecated: see tox_create_popen hook\nlinux:env_activate_command=source activate {envdir}\nwin:env_activate_command=activate.bat {envdir}\n\n# USE CASE 2: plain conda, using requirements.txt\ninstall_command = conda install --prefix {envdir} {opts} --file requirements.txt\n\n# USE CASE 3: conda env\ncreate_env_command = conda env create --prefix {envdir} python={python_version} --file environment.yml\ninstall_command =\n\n[testenv]\ntype=virtualenv\ntype=venv\ntype=conda\ntype=conda-reqs\ntype=conda-env\n```\n\n1. Create a new ``create_env_command`` option.\n;2. Create a new ``env_activate_command`` option (also consider how to make that platform dependent).\n2. New substitution variable: {python_version} ('3.5', '2.7', etc')\n3. env type concept: different types change the default options.\n\n1. tox_addoption can now add new \"testenv\" sections to tox.ini:\n```\n[virtualenv]\n[conda]\n[venv]\n```\n2. extend hooks:\n```\n * tox_addoption\n * tox_configure\n for each requested env in config:\n tox_testenv_up_to_date(envmeta)\n tox_testenv_create(envmeta)\n tox_testenv_install_deps(envmeta, env)\n tox_runtest_pre(envmeta, env)\n tox_runtest(envmeta, env, popen)\n tox_runtest_post(envmeta, env)\n```\n\n3. separate virtualenv details from \"VirtualEnv\" class into a plugin.\n\n```\n[tox]\nenvlist={py27,py35}-{sdist,wheel,conda}\n\n[package-sdist]\ncommand = python setup.py sdist\n\n[package-wheel]\ncommand = python setup.py bdist_wheel\n\n[package-conda]\ncommand = conda build ./conda-recipe\n\n[testenv:{sdist,wheel}]\ncommands = py.test\n\n[testenv:conda]\npackages = sdist,wheel\ncommands = py.test --conda-only\n```\n\n* tox_addoption\n* tox_get_python_executable\n* tox_configure\nfor each requested env in config:\n tox_testenv_create(envmeta)\n tox_testenv_install_deps(envmeta, env)\n tox_runtest_pre(envmeta, env)\n tox_runtest(envmeta, env, popen)\n tox_runtest_post(envmeta, env)\n","dir":"/use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/tox-3.20.1/docs/drafts/","name":"tox_conda_notes_niccodemus.md","path":"use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/tox-3.20.1/docs/drafts/tox_conda_notes_niccodemus.md","url":"/use/result_files/scan/downloads/PyPI/unknown/tox/3.20.1/tox-3.20.1/docs/drafts/tox_conda_notes_niccodemus.html"},{"permalink":"/use/result_files/scan/downloads/PyPI/unknown/virtualenv/20.2.1/","layout":"default","title":"virtualenv","content":"# virtualenv\n\n[![PyPI](https://img.shields.io/pypi/v/virtualenv?style=flat-square)](https://pypi.org/project/virtualenv)\n[![PyPI - Implementation](https://img.shields.io/pypi/implementation/virtualenv?style=flat-square)](https://pypi.org/project/virtualenv)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/virtualenv?style=flat-square)](https://pypi.org/project/virtualenv)\n[![Documentation](https://readthedocs.org/projects/virtualenv/badge/?version=latest&style=flat-square)](http://virtualenv.pypa.io)\n[![Gitter Chat](https://img.shields.io/gitter/room/pypa/virtualenv?color=FF004F&style=flat-square)](https://gitter.im/pypa/virtualenv)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/virtualenv?style=flat-square)](https://pypistats.org/packages/virtualenv)\n[![PyPI - License](https://img.shields.io/pypi/l/virtualenv?style=flat-square)](https://opensource.org/licenses/MIT)\n[![Build Status](https://github.com/pypa/virtualenv/workflows/check/badge.svg?branch=main&event=push)](https://github.com/pypa/virtualenv/actions?query=workflow%3Acheck)\n[![codecov](https://codecov.io/gh/pypa/virtualenv/branch/main/graph/badge.svg)](https://codecov.io/gh/pypa/virtualenv)\n[![Code style:\nblack](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n\nA tool for creating isolated `virtual` python environments.\n\n- [Installation](https://virtualenv.pypa.io/en/latest/installation.html)\n- [Documentation](https://virtualenv.pypa.io)\n- [Changelog](https://virtualenv.pypa.io/en/latest/changelog.html)\n- [Issues](https://github.com/pypa/virtualenv/issues)\n- [PyPI](https://pypi.org/project/virtualenv)\n- [Github](https://github.com/pypa/virtualenv)\n\n## Code of Conduct\n\nEveryone interacting in the virtualenv project's codebases, issue trackers, chat rooms, and mailing lists is expected to\nfollow the [PSF Code of Conduct](https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md).\n","dir":"/use/result_files/scan/downloads/PyPI/unknown/virtualenv/20.2.1/","name":"README.md","path":"use/result_files/scan/downloads/PyPI/unknown/virtualenv/20.2.1/virtualenv-20.2.1/README.md","url":"/use/result_files/scan/downloads/PyPI/unknown/virtualenv/20.2.1/"},{"sort":1,"published":true,"layout":"default","title":"Source Install","content":"<h1 id=\"source-install\">Source Install</h1>\n<pre><code class=\"language-note\">OSS Review Toolkit Source Code가 [Github Repository](https://github.com/oss-review-toolkit/ort)에서 배포됩니다.\n</code></pre>  \n\n<h2 id=\"필요-사항\">필요 사항</h2>\n<ul>\n <li>Linux / windows / macOS</li>\n <li>OpenJDK 11 or later</li>\n <li>Git</li>\n <li>Gradle</li>\n</ul>\n\n<h2 id=\"설치--방법\">설치 방법</h2>\n\n<h3 id=\"0-source-code-다운로드\">0. Source Code 다운로드</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git clone https://github.com/oss-review-toolkit/ort.git\n</code></pre>  </div></div>\n\n<h3 id=\"1-build\">1. Build</h3>\n\n<h4 id=\"build-using-docker\">Build using Docker</h4>\n<ol>\n <li>필요 사항\n <ul>\n <li>Docker 18.09 이후 버전</li>\n <li>Enable BuildKit for Docker</li>\n </ul>\n </li>\n <li>Docker build 명령으로 Docker 이미지 생성\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cd ort\n~/ort$ docker build -t ort .\n</code></pre>  </div> </div>\n </li>\n <li>생성된 Docker 이미지 확인\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nort                 latest              b8348af14a4f        3 days ago          4.24GB\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<h4 id=\"build-natively\">Build natively</h4>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cd ort\n~/ort$ ./gradlew installDist\n</code></pre>  </div></div>\n","dir":"/run/","name":"1_analyze.md","path":"run/1_analyze.md","url":"/run/1_analyze.html"},{"sort":1,"published":true,"permalink":"/run/","layout":"default","title":"How to Run","content":"<h1 id=\"how-to-run\">How to Run</h1>\n\n<pre><code class=\"language-note\">ORT는 Linux, Windows, macOS에 대하여 지원합니다.  \n\nORT를 실행하려면 최소한 Java 11이 필요합니다. 메모리 및 CPU 요구 사항은 분석할 프로젝트의 크기와 유형에 따라 다르지만, 8GiB 메모리(-Xmx = 8g)로 Java를 구성하고 코어가 4개 이상인 CPU를 권장합니다.  \n\nORT에서 프로젝트를 분석하기 위해 필요한 외부 도구는 ort requirements 명령으로 조회 가능합니다. 패키지 관리자가 목록에 없는 경우는 ORT에 내부적으로 직접 통합되며 외부 도구를 설치할 필요가 없는 경우입니다.\n\n[공식 리파지토리](https://github.com/oss-review-toolkit/ort)에서 Source Code를 다운로드 받을 수 있고, Build시 Docker 이미지 또는 실행 파일을 생성할 수 있습니다. \n\n</code></pre>  \n\n<ul>\n <li><a href=\"/run/1_analyze.html\">Source Install</a></li>\n <li><a href=\"/run/2_check.html\">설치 확인 방법</a></li>\n</ul>\n","dir":"/run/","name":"README.md","path":"run/README.md","url":"/run/"},{"sort":1,"published":true,"layout":"default","title":"세부 실행 방법","content":"<h1 id=\"세부-실행-방법\">세부 실행 방법</h1>\n<pre><code class=\"language-note\">분석을 위한 Tool 기반으로 세부 실행 방법을 설명합니다.\n1. Analyzer : 프로젝트의 dependency 정보와 metadata를 추출합니다.\n2. Scanner : Source Code를 다운로드 받은 후 Source Code에서 License text를 분석하는 Tool로 분석합니다.\n3. Evaluator : Scanner 결과에 대한 사용자 지정 License 정책 검사를 수행합니다.\n4. Advisor : 보안 취약점을 조회합니다. (단, 사용을 위해서 [Nexus IQ Server](https://help.sonatype.com/iqserver)의 License가 필요합니다.)\n5. Reporter : 분석 결과를 여러가지 형태로 출력합니다.\n</code></pre>  \n<h2 id=\"1-analyzer-실행하기\">1. Analyzer 실행하기</h2>\n<p>지정된 입력 디렉토리 (-i) 내에서 프로젝트의 dependency을 결정하는 Software Composition Analysis (SCA) 도구입니다.<br />\n감지 된 package manager를 이용하여 수행됩니다. 프로젝트의 transitive dependency의 tree와 package의 meta data를 지정된 출력 디렉토리(-o)에 analyzer-result.yml (또는 JSON, -f 참조) 파일로 작성합니다.</p>\n<ul>\n <li>지원하는 Package Manager: Bower, Bundler, Cargo, Carthage, Conan, DotNet, GoDep, GoMod, Gradle, Maven, NPM, NuGet, PhpComposer, PIP, Pipenv, Pub, SBT, SpdxDocumentFile, Stack, Yarn</li>\n</ul>\n\n<h3 id=\"실행-방법\">실행 방법</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$./cli/build/install/ort/bin/ort analyze -i [working-directory] -o [analyzer-output-dir]\n</code></pre>  </div></div>\n\n<table>\n <thead>\n <tr>\n <th>Parameters</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>i</td>\n <td>분석할 Working directory</td>\n </tr>\n <tr>\n <td>o</td>\n <td>Analyzer 실행 결과가 생성될 path</td>\n </tr>\n <tr>\n <td>f</td>\n <td>실행 결과 파일 형식 (JSON,XML,YAML 중 선택.) Default : YAML</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"2-scanner-실행하기\">2. Scanner 실행하기</h2>\n<p>Analyzer 결과 (-i)가 전달되면 Scanner는 Downloader를 통해 소스를 다운로드한 후 스캔합니다.</p>\n\n<h3 id=\"실행-방법-1\">실행 방법</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$./cli/build/install/ort/bin/ort scan -i [analyzer-output-file] -o [scanner-output-dir]\n</code></pre>  </div></div>\n\n<table>\n <thead>\n <tr>\n <th>Parameters</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>i</td>\n <td>Analyzer 결과 파일</td>\n </tr>\n <tr>\n <td>o</td>\n <td>Scanner 실행 결과가 생성될 path</td>\n </tr>\n <tr>\n <td>s</td>\n <td>Scanner Tool을 <a href=\"https://github.com/nexB/scancode-toolkit\">ScanCode</a>, <a href=\"https://github.com/amzn/askalono\">Askalono</a>, <a href=\"https://github.com/boyter/lc\">lc</a>, <a href=\"https://github.com/benbalter/licensee\">Licensee</a> 중에서 선택. (Default : <a href=\"https://github.com/nexB/scancode-toolkit\">ScanCode</a>)</td>\n </tr>\n <tr>\n <td>f</td>\n <td>실행 결과 파일 형식 (JSON,XML,YAML 중 선택.) Default : YAML</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"3-evaluator-실행하기\">3. Evaluator 실행하기</h2>\n<p>Scanner 결과에 대한 사용자 지정 License 정책 검사를 수행하는 데 사용합니다.<br />\n확인할 규칙은 스크립트로 구현됩니다.</p>\n\n<h3 id=\"예제-파일\">예제 파일</h3>\n<ul>\n <li><a href=\"https://github.com/oss-review-toolkit/ort/blob/master/examples/rules.kts\">rules.kts</a> : 사용자가 정의한 Policy Rule</li>\n <li><a href=\"https://github.com/oss-review-toolkit/ort/blob/master/examples/license-classifications.yml\">license-classifications.yml</a> : 사용자가 정의한 License 카테고리</li>\n <li><a href=\"https://github.com/oss-review-toolkit/ort/blob/master/examples/curations.yml\">curations.yml</a> : 사용자가 정의한 Package Curation.</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$./cli/build/install/ort/bin/ort evaluate --package-curations-file [examples/curations.yml] --rules-file [examples/rules.kts] --license-configuration-file  [examples/license-classifications.yml] -i [analyzer-output-file] -o [evaluator-output-dir]\n</code></pre>  </div></div>\n\n<table>\n <thead>\n <tr>\n <th>Parameters</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>i</td>\n <td>Analyzer 결과 파일</td>\n </tr>\n <tr>\n <td>o</td>\n <td>Evaluator 실행 결과가 생성될 path</td>\n </tr>\n <tr>\n <td>-rules-file</td>\n <td>Policy Rule 파일</td>\n </tr>\n <tr>\n <td>-package-curations-file</td>\n <td>Package Curation 파일</td>\n </tr>\n <tr>\n <td>-license-configuration-file</td>\n <td>License 카테고리 파일</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"4-advisor-실행하기\">4. Advisor 실행하기</h2>\n<p>보안 취약점을 조회합니다.<br />\n실행하기 위해서 Analyzer 결과와 <a href=\"https://help.sonatype.com/iqserver\">Nexus IQ Server</a>의 계정, License가 필요합니다.</p>\n\n<h3 id=\"준비-사항\">준비 사항</h3>\n<p>ORT Configuration file 생성\nort.conf 파일을 생성하고 하기와 같이 작성합니다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ort {\n  advisor {\n    nexusiq {\n      serverUrl = \"https://nexusiq.ossreviewtoolkit.org\"\n      username = myUser\n      password = myPassword\n    }\n  }\n}\n</code></pre>  </div></div>\n\n<h3 id=\"실행-방법-2\">실행 방법</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$./cli/build/install/ort/bin/ort -c [ort.conf] advise -o [advisor-output-dir] -i [analyzer-output-file] \n</code></pre>  </div></div>\n\n<table>\n <thead>\n <tr>\n <th>Parameters</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>i</td>\n <td>Analyzer 결과 파일</td>\n </tr>\n <tr>\n <td>o</td>\n <td>Advisor 실행 결과가 생성될 path</td>\n </tr>\n <tr>\n <td>c</td>\n <td>ORT Configuration file</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"5-reporter-생성하기\">5. Reporter 생성하기</h2>\n<p>분석 결과를 여러가지 형태로 출력합니다.</p>\n\n<h3 id=\"실행-방법-3\">실행 방법</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$./cli/build/install/ort/bin/ort report\n  -f NoticeTemplate,StaticHtml,WebApp\n  -i [evaluator-output-file]\n  -o [reporter-output-dir]\n</code></pre>  </div></div>\n\n<table>\n <thead>\n <tr>\n <th>Parameters</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>i</td>\n <td>Evaluator 결과 파일 (Evaluator를 사용하지 않는 경우, Scanner 결과 파일)</td>\n </tr>\n <tr>\n <td>o</td>\n <td>Reporter 실행 결과가 생성될 path</td>\n </tr>\n <tr>\n <td>f</td>\n <td>출력하는 Report 형태 (AmazonOssAttributionBuilder,AntennaAttributionDocument, CycloneDx,EvaluatedModelJson, EvaluatedModelYaml, Excel,GitLabLicenseModel, NoticeTemplate,SpdxDocument, StaticHtml, WebApp)</td>\n </tr>\n </tbody>\n</table>\n","dir":"/use/","name":"1_analyze.md","path":"use/1_analyze.md","url":"/use/1_analyze.html"},{"sort":2,"published":true,"layout":"default","title":"설치 확인 방법","content":"<h1 id=\"설치-확인-방법\">설치 확인 방법</h1>\n\n<h2 id=\"docker를-이용한-실행-방법\">Docker를 이용한 실행 방법</h2>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$docker run -v /workspace:/project ort --info analyze -f JSON -i /project -o /project/ort/analyzer\n</code></pre>  </div></div>\n<h3 id=\"parameter\">Parameter</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$docker run \\\n  -v $PWD/:/project  \\ # Mount current working directory into /project to use as input.\n  ort --info analyze \\\n  -c /project/ort/config.hocon \\ # Use file from \"&lt;workingdirectory&gt;/ort\" as config.\n  analyze (...) # Insert further arguments for the command.\n</code></pre>  </div></div>\n<ul>\n <li>v 옵션 : 공유할 호스트 디렉토리와 컨테이너 디렉토리를 설정</li>\n <li>c 옵션 : Config 파일 설정</li>\n <li>analyze (…) : <a href=\"https://lge-oss.github.io/oss-review-toolkit-guide/use/1_analyze.html\">ort의 실행 arguments</a></li>\n</ul>\n\n<h2 id=\"build한-소스-코드-기반-실행-방법\">Build한 소스 코드 기반 실행 방법</h2>\n<h3 id=\"추가적인-tool이-미설치된-것인지-확인\">추가적인 Tool이 미설치된 것인지 확인</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/ort$./cli/build/install/ort/bin/ort requirements\n</code></pre>  </div></div>\n<h3 id=\"실행-command-확인-방법\">실행 Command 확인 방법</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/ort$./cli/build/install/ort/bin/ort --help\n</code></pre>  </div></div>\n","dir":"/run/","name":"2_check.md","path":"run/2_check.md","url":"/run/2_check.html"},{"sort":2,"published":true,"layout":"default","title":"실행 결과","content":"<h1 id=\"실행-결과\">실행 결과</h1>\n<p>OSS Review Toolkit를 <a href=\"https://lge-oss.github.io/oss-review-toolkit-guide/use/1_analyze.html\">실행 방법 가이드</a>에 따라 수행한 결과 파일을 살펴봅니다. <br />\n단, 보안 취약점을 조회하는 Advisor의 경우 <a href=\"https://help.sonatype.com/iqserver\">Nexus IQ Server</a>의 License가 필요한 기능으로 무료로 사용 불가합니다. 따라서 실행 결과에 포함되지 않습니다.</p>\n\n<pre><code class=\"language-note\">실행 예제 Project : https://github.com/carletes/mock-ssh-server\n- pypi 배포 링크 : https://pypi.org/project/mock-ssh-server\n- Version: 0.8.2\n- License : MIT\n- Python 3.6 환경에서 Dependency로 Pypi에 배포되는 [paramiko](https://pypi.org/project/paramiko/)를 설치합니다.\n</code></pre>  \n\n<h2 id=\"0-실행-환경\">0. 실행 환경</h2>\n<ol>\n <li>git repository에서 Source code를 다운로드 받습니다.\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$git clone https://github.com/carletes/mock-ssh-server -b 0.8.2\n</code></pre>  </div> </div>\n </li>\n <li><a href=\"https://www.anaconda.com/products/individual\">anaconda</a>를 이용하여 Python 3.6으로 환경 세팅합니다.</li>\n <li>Source Code를 기반으로 ORT를 실행합니다.</li>\n</ol>\n\n<h2 id=\"1-analyzer-실행-결과\">1. Analyzer 실행 결과</h2>\n<pre><code class=\"language-note\">Project의 Dependency정보와 metadata를 출력합니다.\n</code></pre>  \n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ tree -L 1 analyzer/\nanalyzer/\n└── analyzer-result.yml\n</code></pre>  </div></div>\n<ul>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/analyzer/analyzer-result.yml\">analyzer-result.yml</a></li>\n</ul>\n\n<h3 id=\"추출-정보\">추출 정보</h3>\n\n<table>\n <thead>\n <tr>\n <th>Key</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>repository &gt; vcs</td>\n <td>Version Control System 기반 추출된 정보를 표시합니다.</td>\n </tr>\n <tr>\n <td>repository &gt; vcs_processed</td>\n <td>Version Control System URL 또는 Fallback URL에서 추출된 정보를 표시합니다.</td>\n </tr>\n <tr>\n <td>analyzer &gt; result</td>\n <td>depedency 관련 추출된 정보를 표시합니다.</td>\n </tr>\n <tr>\n <td>analyzer &gt; result &gt; projects</td>\n <td>상위 project의 정보가 출력됩니다.</td>\n </tr>\n <tr>\n <td>analyzer &gt; result &gt; packages</td>\n <td>Project별 depdency에 따른 package 정보가 출력됩니다.</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"2-scanner-실행-결과\">2. Scanner 실행 결과</h2>\n<pre><code class=\"language-note\">Analyzer 출력 결과에 따라 Dependency가 있는 Package를 다운로드 받은 후,Default Scanner인 ScanCode로 Source Code에 작성된 License text를 분석한 결과와 Copyright text가 출력됩니다.\n</code></pre>  \n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ tree -L 1 scan/\nscan/\n├── downloads\n├── native-scan-results\n└── scan-result.yml\n</code></pre>  </div></div>\n<ul>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/scan/downloads\">downloads</a></li>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/scan/native-scan-results\">native-scan-results</a></li>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/scan/scan-result.yml\">scan-result.yml</a></li>\n</ul>\n\n<h3 id=\"output-정보\">Output 정보</h3>\n\n<table>\n <thead>\n <tr>\n <th>File or Directory</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>downloads</td>\n <td>Analyzer 결과에 따라 Dependency가 있는 Package를 다운로드 받은 폴더</td>\n </tr>\n <tr>\n <td>native-scan-results</td>\n <td>각 Package별 Scanner 분석 결과 파일이 위치한 폴더</td>\n </tr>\n <tr>\n <td>scan-result.yml</td>\n <td>Analyzer 결과에 Scanner 분석 결과가 추가된 파일. Scanner 분석 결과에는 검출된 License, Copyright text가 포함됩니다.</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"3-evaluator-실행-결과\">3. Evaluator 실행 결과</h2>\n<pre><code class=\"language-note\">[License별 Category를 정의한 파일](https://github.com/oss-review-toolkit/ort/blob/master/examples/license-classifications.yml \"license-classifications.yml\")과 [분석할 Rule을 정의한 파일](https://github.com/oss-review-toolkit/ort/blob/master/examples/rules.kts \"rules.kts\")을 기반으로 이슈가 있는 사항을 검사하여 출력합니다.\n</code></pre>  \n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ tree -L 1 evaluate/\nevaluate/\n└── evaluation-result.yml\n</code></pre>  </div></div>\n<ul>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/evaluate/evaluation-result.yml\">evaluation-result.yml</a></li>\n</ul>\n\n<h3 id=\"output-정보-1\">Output 정보</h3>\n\n<table>\n <thead>\n <tr>\n <th>File</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>scan-result.yml</td>\n <td>Analyzer, Scanner 분석 결과에 Evaluator 출력 결과가 추가된 파일. Evaluator 출력 결과에는 rules.kts 파일에 정의된 Rule에 따라 분석 결과가 출력됩니다.</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"4-reporter-실행-결과\">4. Reporter 실행 결과</h2>\n<pre><code class=\"language-note\">분석한 결과를 여러 가지 형태로 변환합니다.\n</code></pre>  \n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ tree -L 1 report/\nreport/\n   ├── NOTICE_default\n   ├── scan-report-web-app.html\n   └── scan-report.html\n</code></pre>  </div></div>\n<ul>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/report/evaluate/NOTICE_default\">NOTICE_default</a></li>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/report/evaluate/scan-report-web-app.html\">scan-report-web-app.html</a></li>\n <li><a href=\"https://github.com/LGE-OSS/oss-review-toolkit-guide/blob/master/use/result_files/report/evaluate/scan-report.html\">scan-report.html</a></li>\n</ul>\n\n<h3 id=\"output-정보-2\">Output 정보</h3>\n\n<table>\n <thead>\n <tr>\n <th>File</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>NOTICE_default</td>\n <td>프로젝트 자체에서 찾은 모든 License의 Summary를 출력하고 모든 Dependency에 대한 License를 별도로 나열합니다.</td>\n </tr>\n <tr>\n <td>scan-report-web-app.html</td>\n <td>web app 형태의 report 파일</td>\n </tr>\n <tr>\n <td>scan-report.html</td>\n <td>html 형태의 report 파일</td>\n </tr>\n </tbody>\n</table>\n\n<h3 id=\"example\">Example</h3>\n<ul>\n <li>scan-report-web-app.html</li>\n</ul>\n\n<p>1.Summary</p>\n<ul>\n <li>Violations : Evaluator 분석 결과, 정의된 Rule별 검출된 Package 목록<br />\n<img src=\"/use/img_result/4_reporter_summary_rule.png\" alt=\"Summary\" /></li>\n <li>Issues : 이슈가 검출된 Package 정보 \n<img src=\"/use/img_result/4_reporter_summary_issue.png\" alt=\"Summary\" /></li>\n <li>Declared Licenses : Declared License별 검출된 Package의 수\n<img src=\"/use/img_result/4_reporter_summary_package.png\" alt=\"Summary\" /></li>\n</ul>\n\n<p>2.Table</p>\n<ul>\n <li>Dependency 정보를 List 형태로 출력합니다. <br />\n<img src=\"/use/img_result/4_reporter_table.png\" alt=\"Summary\" /></li>\n</ul>\n\n<p>3.Tree</p>\n<ul>\n <li>Project별 depedency 정보가 tree 형태로 출력합니다.<br />\n<img src=\"/use/img_result/4_reporter_tree.png\" alt=\"Summary\" /></li>\n</ul>\n","dir":"/use/","name":"2_result.md","path":"use/2_result.md","url":"/use/2_result.html"},{"sort":2,"published":true,"permalink":"/use/","layout":"default","title":"How to Use","content":"<h1 id=\"how-to-use\">How to Use</h1>\n\n<pre><code class=\"language-note\">ORT는 Transitive dependency의 tree와 package의 meta data를 분석하여 각 Package별 Source Code를 다운로드 받아 License text를 분석합니다.\n\n분석 결과 dependency가 있는 package의 정보, License, Copyright text 결과를 다양한 형태의 Report로 출력할 수 있습니다.  이 때, Report에 사용자가 정의한 License Policy 적용 결과를 추가할 수 있습니다. \n\n또한 검출된 License text, Copyright text를 취합한 NOTICE 파일을 생성할 수 있습니다.\n</code></pre>  \n\n<ul>\n <li><a href=\"/use/1_analyze.html\">세부 실행 방법</a></li>\n <li><a href=\"/use/2_result.html\">실행 결과</a></li>\n</ul>\n","dir":"/use/","name":"README.md","path":"use/README.md","url":"/use/"}]